# This file is part of IntegerTriangles.
# Copyright Peter Luschny. License is MIT.

# Version of: UTC 2020-03-04 22:23:21
# 5ff722b0-5e5e-11ea-058f-53e64e5155a3

# Do not edit this file, it is generated from the modules and will be overwritten!
# Edit the modules in the src directory and build this file with BuildTriangles.jl!

module runtests
tstdir = realpath(joinpath(dirname(@__FILE__)))
srcdir = joinpath(dirname(tstdir), "src")
tstdir ∉ LOAD_PATH && push!(LOAD_PATH, tstdir)
srcdir ∉ LOAD_PATH && push!(LOAD_PATH, srcdir)
using Nemo, Test, IntegerTriangles
# *** Aliases.jl *********
# *** SeqFingerPrint.jl *********
A = [ZZ(1), -1, 1, 3, -4, 1, -23, 33, -11, 1, 425, -620, 220, -26, 1, -18129, 26525, -9520, 1180, -57, 1, 1721419, -2519664, 905765, -113050, 5649, -120, 1]
B = [ZZ(1),1,2,2,4,8,13,25,44,83,152,286,538,1020,1942,3725,7145,13781,26627,51572,100099,194633,379037,739250,1443573,2822186,5522889,10818417,21209278,41613288,81705516,160532194,315604479,620834222,1221918604,2406183020,4740461247]
for n in 1:100
anum = "A" * string(n, base = 10, pad = 6)
FP = AnumToFingerPrint(anum)
println(anum, " -> ", FP)
end
AnumSearch("8eecebee") |> println
AnumSearch("c85ebeb0", true)
AnumSearch("021dbce9") |> println
println()
a = SimilarSeq(A)
println(a)
aa = AnumSearch(a)
aa == "" ? println("No match!") : println(aa)
println()
b = SimilarSeq(B)
println(b)
bb = AnumSearch(b)
bb == "" ? println("No match!") : println(bb)
# *** TrianglesBase.jl *********
# *** TrianglesExamples.jl *********
@testset "Laguerre" begin
A = [ZZ(0), 1, 6, 39, 292, 2505, 24306, 263431]
@test Laguerre(0) == [ZZ(1)]
@test Laguerre(3) == [ZZ(6), 18, 9, 1]
@test Laguerre(5) == [ZZ(120), 600, 600, 200, 25, 1]
@test Laguerre(6, 1) == ZZ(4320)
@test [Laguerre(7, k) for k in 0:7] == Laguerre(7)
@test Laguerre([ZZ(0), 1, 2, 3, 4, 5]) == ZZ(2505)
@test Laguerre([ZZ(0), 1, 4, 9, 16, 25]) == ZZ(5225)
@test LaguerreTransform([ZZ(n) for n in 0:7]) == A
@test typeof(Laguerre(3, 3))       === fmpz                   # ℤInt
@test typeof(Laguerre(5))          === Array{fmpz,1}          # ℤSeq
@test typeof(Laguerre(A))          === fmpz                   # ℤInt
@test typeof(LaguerreTriangle(5))  === Array{Array{fmpz,1},1} # ℤTri
@test typeof(LaguerreTransform(A)) === Array{fmpz,1}          # ℤSeq
end
# *** TrianglesPlot.jl *********
# *** TrianglesTraitCard.jl *********
dim = 8
TraitCard(BinomialTriangle, BinomialTransform, dim)
TraitCard(LaguerreTriangle, LaguerreTransform, dim)
TraitCard(LahTriangle, LahTransform, dim)
TraitCard(CatalanTriangle, CatalanTransform, dim)
TraitCard(MotzkinTriangle, MotzkinTransform, dim)
TraitCard(NarayanaTriangle, NarayanaTransform, dim)
TraitCard(SchroederBigTriangle, SchroederBigTransform, dim)
TraitCard(JacobsthalTriangle, JacobsthalTransform, dim)
TraitCard(FibonacciTriangle, FibonacciTransform, dim)
TraitCard(EulerianTriangle, EulerianTransform, dim)
# *** TrianglesUtils.jl *********
T = LaguerreTriangle(7)
println("\nThe $Laguerre triangle in different formats:")
println("\nTriangle in standard format:\n")
Show(T)
println("\nTriangle as a nested array:\n")
Show(T, "nest")
println("\n\nTriangle in flattened format:\n")
Show(T, "Flat")
println("\n\nTriangle in info format with sequence ID:\n")
Show(T, "info")
println("\nTriangle in mapped format:\n")
Show(T, "map")
end # module